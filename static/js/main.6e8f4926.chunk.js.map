{"version":3,"sources":["selectors/selectFields.js","services/hacknApi.js","styles/StoryStyles.js","mappers/mapTime.js","components/Story.js","styles/StoriesContainerStyles.js","hooks/useInfiniteScroll.js","constants/index.js","utils/debounce.js","containers/StoriesContainer.js","App.js","serviceWorker.js","index.js"],"names":["selectFields","id","by","url","time","title","baseUrl","newStoriesUrl","storyUrl","getStory","storyId","a","axios","get","then","data","result","getStoryIds","StoryWrapper","styled","section","StoryTitle","h1","StoryMeta","div","StoryMetaElement","span","props","color","mapTime","timestamp","seconds","Math","floor","Date","interval","Story","memo","useState","story","setStory","useEffect","href","GlobalStyle","createGlobalStyle","StoriesContainerWrapper","main","useInfiniteScroll","loading","setLoading","count","setCount","handleScroll","func","wait","immediate","args","timeout","context","callNow","clearTimeout","setTimeout","apply","debounce","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener","StoriesContainer","storyIds","setStoryIds","console","log","slice","map","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","render","StrictMode","getElementById","URL","process","origin","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6e8f4926.chunk.js","sourcesContent":["export const selectFields = ({id, by, url, time, title}= {}) => ({\r\n    id, \r\n    by, \r\n    url, \r\n    time, \r\n    title,\r\n});","import axios from 'axios';\r\nimport {selectFields} from '../selectors/selectFields';\r\n//Setting url\r\nexport const baseUrl = ' https://hacker-news.firebaseio.com/v0/';\r\nexport const newStoriesUrl = `${baseUrl}newstories.json`;\r\nexport const storyUrl = `${baseUrl}item/`;\r\n\r\n\r\nexport const getStory = async (storyId) => {\r\n    const result = await axios.get(`${storyUrl + storyId}.json`).then(({data})=> data && selectFields(data));\r\n    return result;\r\n}\r\n\r\n//function\r\nexport const getStoryIds = async () => {\r\n    const result = await axios.get(newStoriesUrl).then(({data}) => data);\r\n    return result;\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const StoryWrapper = styled.section`\r\n  padding-top:10px;\r\n  margin-bottom:20px;\r\n  border-top:1px solid #cccccc;\r\n\r\n  &:first-of-type{\r\n      border-top:0;\r\n  }\r\n\r\n  &:last-of-type{\r\n      margin-bottom:0;\r\n      padding-bottom:0;\r\n  }\r\n`;\r\n\r\n\r\nexport const StoryTitle = styled.h1`\r\n  margin-bottom:5px;\r\n  font-size:18px;\r\n  line-heigt:1.8;\r\n  margin:0;\r\n  text-decoratopm:none;\r\n\r\n  a{\r\n      color #2e2e2c;\r\n      background-color:#f8dc3d;\r\n      text-decoration:none;\r\n  }\r\n`;\r\n\r\nexport const StoryMeta = styled.div`\r\nfont-style:italic;\r\n\r\n>span(:first-child){\r\n    margin-right: 10px;\r\n}\r\n\r\n> span:not(:first-child):before{\r\n    content:'~';\r\n    margin:0 7px;\r\n}\r\n\r\n\r\n.story__meta-bold{\r\n    font-weight:bold;\r\n}\r\n\r\n`;\r\n\r\nexport const StoryMetaElement = styled.span`\r\nfont-weight:bold;\r\ncolor:${props => props.color || 'red'};\r\n`;\r\n\r\n\r\n//<StoryMetaElement color='#fff'/>","export const mapTime = timestamp => {\r\n    const seconds = Math.floor((new Date - timestamp * 1000) / 1000);\r\n\r\n    let interval = Math.floor(seconds / 31536000);\r\n\r\n    if(interval > 1){\r\n        return `${interval} years`;\r\n    }\r\n    interval = Math.floor(seconds / 2592000);\r\n\r\n    if(interval > 1){\r\n        return `${interval} months`;\r\n    }\r\n    interval =Math.floor(seconds /86400);\r\n\r\n    if(interval > 1){\r\n        return `${interval} days`;\r\n    }\r\n    interval = Math.floor(seconds / 3600000);\r\n\r\n    if(interval > 1){\r\n        return `${interval} hours`;\r\n    }\r\n    interval = Math.floor(seconds / 60);\r\n   \r\n    if(interval > 1){\r\n        return `${interval} minutes`;\r\n    }\r\n    return `${Math.floor(seconds/60)} seconds`;\r\n\r\n}","import React, { useState, useEffect, memo } from \"react\";\r\nimport { getStory } from '../services/hacknApi';\r\nimport { StoryWrapper, StoryTitle, StoryMeta, StoryMetaElement } from \"../styles/StoryStyles\";\r\nimport {mapTime} from \"../mappers/mapTime\"\r\n\r\nexport const Story = memo(function Story({ storyId }){\r\n    const [story, setStory] = useState({});\r\n    useEffect(() => {\r\n        getStory(storyId).then(data => data && data.url && setStory(data));\r\n    }, []);\r\n    //return(<p>{JSON.stringify(story)}</p>);\r\n    return story && story.url ? (\r\n        <StoryWrapper data-testid=\"story\">\r\n            <StoryTitle>\r\n                <a href={story.url}>{story.title}</a>\r\n            </StoryTitle>\r\n            <StoryMeta>\r\n                <span data-testid=\"story-by\">\r\n                    <StoryMetaElement color=\"#000\">By:</StoryMetaElement> {story.by}\r\n                </span>\r\n                <span data-testid=\"story-time\">\r\n                    <StoryMetaElement color=\"#000\">Posted:</StoryMetaElement> {`  `}\r\n                    {mapTime(story.time)}\r\n                </span>\r\n            </StoryMeta>\r\n        </StoryWrapper>\r\n    ) : null;\r\n});","import styled, {createGlobalStyle} from 'styled-components';\r\n\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n html{\r\n     -webkit-box-sizing:border-box;\r\n     box-sizing:border-box;\r\n }\r\n *,*:before, *:after{\r\n     -webkit-box-sizing: inherit;\r\n     box-sizing: inherit;\r\n }\r\n\r\n body{\r\n     margin:0;\r\n     padding:0;\r\n     line-hieght:1;\r\n     color:#202020;\r\n     background-color:#fafafe;\r\n     font-family: Arial, Helvetica, sans-serif;\r\n     font-size:16px;\r\n }\r\n\r\n ul{\r\n     margin:0;\r\n     padding:0;\r\n }\r\n`;\r\n\r\nexport const StoriesContainerWrapper = styled.main `\r\n  max-width: 1140px;\r\n  padding-top:20px 15px;\r\n  margin:auto;\r\n`;","import {useState, useEffect} from 'react';\r\nimport {STORY_INCIDENT, MAX_STORIES} from '../constants/index';\r\nimport { debounce } from '../utils/debounce';\r\n\r\nexport const useInfiniteScroll = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [count, setCount] = useState(STORY_INCIDENT);\r\n\r\n    const handleScroll = debounce(() => {\r\n       if(window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || loading){\r\n          return false;\r\n       }\r\n\r\n       setLoading(true);\r\n    }, 500);\r\n\r\n   useState(()=> {\r\n          if(!loading){return;}\r\n\r\n          if(count + STORY_INCIDENT >= MAX_STORIES){\r\n              setCount(MAX_STORIES);\r\n          }else{\r\n           setCount(count + STORY_INCIDENT);\r\n          }\r\n\r\n          setLoading(false);\r\n   }, [loading]);\r\n\r\n\r\n   useEffect(() => {\r\n        window.addEventListener('scroll', handleScroll);\r\n        return () => window.removeEventListener('scroll', handleScroll);\r\n   }, []);\r\n \r\n   return {count};\r\n};\r\n\r\n","export const MAX_STORIES = 500;\r\nexport const STORY_INCIDENT = 30;","export const debounce = (func, wait, immediate, args) => {\r\n    let timeout;\r\n\r\n    return () => {\r\n        const context = this.context;\r\n        const callNow = immediate && !timeout;\r\n        const later = () => {\r\n            timeout = null;\r\n            if(!immediate) func.apply(context, args);\r\n        };\r\n\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(later, wait);\r\n\r\n        if(callNow) func.apply(context, args);\r\n    };\r\n};","import React, { useEffect, useState } from 'react';\r\nimport { getStoryIds } from '../services/hacknApi';\r\nimport { Story } from '../components/Story';\r\nimport { GlobalStyle, StoriesContainerWrapper } from '../styles/StoriesContainerStyles';\r\nimport { useInfiniteScroll } from '../hooks/useInfiniteScroll';\r\n\r\n\r\nexport const StoriesContainer = () => {\r\n    const {count} = useInfiniteScroll;\r\n    const [storyIds, setStoryIds] = useState([]);\r\n   \r\n\r\n    useEffect(() => {\r\n        getStoryIds().then(data => setStoryIds(data));\r\n        console.log('count', count);\r\n        //getStory(20970623).then(data => console.log(data));\r\n    }, [count]);\r\n\r\n    // [] = when the component mounts, do this...\r\n    //[storyIdsUpdated (true/false)]\r\n    return (\r\n        <>\r\n            <GlobalStyle/>\r\n                <StoriesContainerWrapper data-test-id=\"stories-container\">\r\n                    <h1>Hacking News Stories</h1>\r\n                    {storyIds.slice(0, count).map(storyId => (<Story key={storyId} storyId={storyId} />))}\r\n                </StoriesContainerWrapper>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\nimport { StoriesContainer } from './containers/StoriesContainer';\n\nexport const App = () => <StoriesContainer/>;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\nimport {render} from 'react-dom';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();"],"sourceRoot":""}